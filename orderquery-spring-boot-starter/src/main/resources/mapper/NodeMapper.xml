<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.damaohongtu.orderquery.dao.mapper.NodeMapper">
  <resultMap id="BaseResultMap" type="com.damaohongtu.orderquery.dao.entity.Node">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="node_code" jdbcType="VARCHAR" property="nodeCode" />
    <result column="graph_code" jdbcType="VARCHAR" property="graphCode" />
    <result column="node_name" jdbcType="VARCHAR" property="nodeName" />
    <result column="node_type" jdbcType="VARCHAR" property="nodeType" />
    <result column="data_source" jdbcType="VARCHAR" property="dataSource" />
    <result column="input_field" jdbcType="VARCHAR" property="inputField" />
    <result column="route_rule" jdbcType="VARCHAR" property="routeRule" />
    <result column="neighbor_node" jdbcType="VARCHAR" property="neighborNode" />
    <result column="coordinate" jdbcType="VARCHAR" property="coordinate" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="valid" jdbcType="TINYINT" property="valid" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.damaohongtu.orderquery.dao.entity.Node">
    <result column="output_field" jdbcType="LONGVARCHAR" property="outputField" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, node_code, graph_code, node_name, node_type, data_source, input_field, route_rule, 
    neighbor_node, coordinate, create_time, update_time, create_by, update_by, valid
  </sql>
  <sql id="Blob_Column_List">
    output_field
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.damaohongtu.orderquery.dao.entity.NodeExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from node
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="com.damaohongtu.orderquery.dao.entity.NodeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from node
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from node
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from node
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.damaohongtu.orderquery.dao.entity.NodeExample">
    delete from node
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.damaohongtu.orderquery.dao.entity.Node">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into node (node_code, graph_code, node_name, 
      node_type, data_source, input_field, 
      route_rule, neighbor_node, coordinate, 
      create_time, update_time, create_by, 
      update_by, valid, output_field
      )
    values (#{nodeCode,jdbcType=VARCHAR}, #{graphCode,jdbcType=VARCHAR}, #{nodeName,jdbcType=VARCHAR}, 
      #{nodeType,jdbcType=VARCHAR}, #{dataSource,jdbcType=VARCHAR}, #{inputField,jdbcType=VARCHAR}, 
      #{routeRule,jdbcType=VARCHAR}, #{neighborNode,jdbcType=VARCHAR}, #{coordinate,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=VARCHAR}, 
      #{updateBy,jdbcType=VARCHAR}, #{valid,jdbcType=TINYINT}, #{outputField,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.damaohongtu.orderquery.dao.entity.Node">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into node
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="nodeCode != null">
        node_code,
      </if>
      <if test="graphCode != null">
        graph_code,
      </if>
      <if test="nodeName != null">
        node_name,
      </if>
      <if test="nodeType != null">
        node_type,
      </if>
      <if test="dataSource != null">
        data_source,
      </if>
      <if test="inputField != null">
        input_field,
      </if>
      <if test="routeRule != null">
        route_rule,
      </if>
      <if test="neighborNode != null">
        neighbor_node,
      </if>
      <if test="coordinate != null">
        coordinate,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="valid != null">
        valid,
      </if>
      <if test="outputField != null">
        output_field,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="nodeCode != null">
        #{nodeCode,jdbcType=VARCHAR},
      </if>
      <if test="graphCode != null">
        #{graphCode,jdbcType=VARCHAR},
      </if>
      <if test="nodeName != null">
        #{nodeName,jdbcType=VARCHAR},
      </if>
      <if test="nodeType != null">
        #{nodeType,jdbcType=VARCHAR},
      </if>
      <if test="dataSource != null">
        #{dataSource,jdbcType=VARCHAR},
      </if>
      <if test="inputField != null">
        #{inputField,jdbcType=VARCHAR},
      </if>
      <if test="routeRule != null">
        #{routeRule,jdbcType=VARCHAR},
      </if>
      <if test="neighborNode != null">
        #{neighborNode,jdbcType=VARCHAR},
      </if>
      <if test="coordinate != null">
        #{coordinate,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="valid != null">
        #{valid,jdbcType=TINYINT},
      </if>
      <if test="outputField != null">
        #{outputField,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.damaohongtu.orderquery.dao.entity.NodeExample" resultType="java.lang.Long">
    select count(*) from node
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update node
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.nodeCode != null">
        node_code = #{record.nodeCode,jdbcType=VARCHAR},
      </if>
      <if test="record.graphCode != null">
        graph_code = #{record.graphCode,jdbcType=VARCHAR},
      </if>
      <if test="record.nodeName != null">
        node_name = #{record.nodeName,jdbcType=VARCHAR},
      </if>
      <if test="record.nodeType != null">
        node_type = #{record.nodeType,jdbcType=VARCHAR},
      </if>
      <if test="record.dataSource != null">
        data_source = #{record.dataSource,jdbcType=VARCHAR},
      </if>
      <if test="record.inputField != null">
        input_field = #{record.inputField,jdbcType=VARCHAR},
      </if>
      <if test="record.routeRule != null">
        route_rule = #{record.routeRule,jdbcType=VARCHAR},
      </if>
      <if test="record.neighborNode != null">
        neighbor_node = #{record.neighborNode,jdbcType=VARCHAR},
      </if>
      <if test="record.coordinate != null">
        coordinate = #{record.coordinate,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createBy != null">
        create_by = #{record.createBy,jdbcType=VARCHAR},
      </if>
      <if test="record.updateBy != null">
        update_by = #{record.updateBy,jdbcType=VARCHAR},
      </if>
      <if test="record.valid != null">
        valid = #{record.valid,jdbcType=TINYINT},
      </if>
      <if test="record.outputField != null">
        output_field = #{record.outputField,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update node
    set id = #{record.id,jdbcType=BIGINT},
      node_code = #{record.nodeCode,jdbcType=VARCHAR},
      graph_code = #{record.graphCode,jdbcType=VARCHAR},
      node_name = #{record.nodeName,jdbcType=VARCHAR},
      node_type = #{record.nodeType,jdbcType=VARCHAR},
      data_source = #{record.dataSource,jdbcType=VARCHAR},
      input_field = #{record.inputField,jdbcType=VARCHAR},
      route_rule = #{record.routeRule,jdbcType=VARCHAR},
      neighbor_node = #{record.neighborNode,jdbcType=VARCHAR},
      coordinate = #{record.coordinate,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=VARCHAR},
      update_by = #{record.updateBy,jdbcType=VARCHAR},
      valid = #{record.valid,jdbcType=TINYINT},
      output_field = #{record.outputField,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update node
    set id = #{record.id,jdbcType=BIGINT},
      node_code = #{record.nodeCode,jdbcType=VARCHAR},
      graph_code = #{record.graphCode,jdbcType=VARCHAR},
      node_name = #{record.nodeName,jdbcType=VARCHAR},
      node_type = #{record.nodeType,jdbcType=VARCHAR},
      data_source = #{record.dataSource,jdbcType=VARCHAR},
      input_field = #{record.inputField,jdbcType=VARCHAR},
      route_rule = #{record.routeRule,jdbcType=VARCHAR},
      neighbor_node = #{record.neighborNode,jdbcType=VARCHAR},
      coordinate = #{record.coordinate,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=VARCHAR},
      update_by = #{record.updateBy,jdbcType=VARCHAR},
      valid = #{record.valid,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.damaohongtu.orderquery.dao.entity.Node">
    update node
    <set>
      <if test="nodeCode != null">
        node_code = #{nodeCode,jdbcType=VARCHAR},
      </if>
      <if test="graphCode != null">
        graph_code = #{graphCode,jdbcType=VARCHAR},
      </if>
      <if test="nodeName != null">
        node_name = #{nodeName,jdbcType=VARCHAR},
      </if>
      <if test="nodeType != null">
        node_type = #{nodeType,jdbcType=VARCHAR},
      </if>
      <if test="dataSource != null">
        data_source = #{dataSource,jdbcType=VARCHAR},
      </if>
      <if test="inputField != null">
        input_field = #{inputField,jdbcType=VARCHAR},
      </if>
      <if test="routeRule != null">
        route_rule = #{routeRule,jdbcType=VARCHAR},
      </if>
      <if test="neighborNode != null">
        neighbor_node = #{neighborNode,jdbcType=VARCHAR},
      </if>
      <if test="coordinate != null">
        coordinate = #{coordinate,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="valid != null">
        valid = #{valid,jdbcType=TINYINT},
      </if>
      <if test="outputField != null">
        output_field = #{outputField,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.damaohongtu.orderquery.dao.entity.Node">
    update node
    set node_code = #{nodeCode,jdbcType=VARCHAR},
      graph_code = #{graphCode,jdbcType=VARCHAR},
      node_name = #{nodeName,jdbcType=VARCHAR},
      node_type = #{nodeType,jdbcType=VARCHAR},
      data_source = #{dataSource,jdbcType=VARCHAR},
      input_field = #{inputField,jdbcType=VARCHAR},
      route_rule = #{routeRule,jdbcType=VARCHAR},
      neighbor_node = #{neighborNode,jdbcType=VARCHAR},
      coordinate = #{coordinate,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=VARCHAR},
      update_by = #{updateBy,jdbcType=VARCHAR},
      valid = #{valid,jdbcType=TINYINT},
      output_field = #{outputField,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.damaohongtu.orderquery.dao.entity.Node">
    update node
    set node_code = #{nodeCode,jdbcType=VARCHAR},
      graph_code = #{graphCode,jdbcType=VARCHAR},
      node_name = #{nodeName,jdbcType=VARCHAR},
      node_type = #{nodeType,jdbcType=VARCHAR},
      data_source = #{dataSource,jdbcType=VARCHAR},
      input_field = #{inputField,jdbcType=VARCHAR},
      route_rule = #{routeRule,jdbcType=VARCHAR},
      neighbor_node = #{neighborNode,jdbcType=VARCHAR},
      coordinate = #{coordinate,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=VARCHAR},
      update_by = #{updateBy,jdbcType=VARCHAR},
      valid = #{valid,jdbcType=TINYINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByExampleWithBLOBsWithRowbounds" parameterType="com.damaohongtu.orderquery.dao.entity.NodeExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from node
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleWithRowbounds" parameterType="com.damaohongtu.orderquery.dao.entity.NodeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from node
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
    insert into node
    (node_code, graph_code, node_name, node_type, data_source, input_field, route_rule, 
      neighbor_node, coordinate, create_time, update_time, create_by, update_by, valid, 
      output_field)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.nodeCode,jdbcType=VARCHAR}, #{item.graphCode,jdbcType=VARCHAR}, #{item.nodeName,jdbcType=VARCHAR}, 
        #{item.nodeType,jdbcType=VARCHAR}, #{item.dataSource,jdbcType=VARCHAR}, #{item.inputField,jdbcType=VARCHAR}, 
        #{item.routeRule,jdbcType=VARCHAR}, #{item.neighborNode,jdbcType=VARCHAR}, #{item.coordinate,jdbcType=VARCHAR}, 
        #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}, #{item.createBy,jdbcType=VARCHAR}, 
        #{item.updateBy,jdbcType=VARCHAR}, #{item.valid,jdbcType=TINYINT}, #{item.outputField,jdbcType=LONGVARCHAR}
        )
    </foreach>
  </insert>
  <insert id="batchInsertSelective" keyColumn="id" keyProperty="list.id" parameterType="map" useGeneratedKeys="true">
    insert into node (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'node_code'.toString() == column.value">
          #{item.nodeCode,jdbcType=VARCHAR}
        </if>
        <if test="'graph_code'.toString() == column.value">
          #{item.graphCode,jdbcType=VARCHAR}
        </if>
        <if test="'node_name'.toString() == column.value">
          #{item.nodeName,jdbcType=VARCHAR}
        </if>
        <if test="'node_type'.toString() == column.value">
          #{item.nodeType,jdbcType=VARCHAR}
        </if>
        <if test="'data_source'.toString() == column.value">
          #{item.dataSource,jdbcType=VARCHAR}
        </if>
        <if test="'input_field'.toString() == column.value">
          #{item.inputField,jdbcType=VARCHAR}
        </if>
        <if test="'route_rule'.toString() == column.value">
          #{item.routeRule,jdbcType=VARCHAR}
        </if>
        <if test="'neighbor_node'.toString() == column.value">
          #{item.neighborNode,jdbcType=VARCHAR}
        </if>
        <if test="'coordinate'.toString() == column.value">
          #{item.coordinate,jdbcType=VARCHAR}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'create_by'.toString() == column.value">
          #{item.createBy,jdbcType=VARCHAR}
        </if>
        <if test="'update_by'.toString() == column.value">
          #{item.updateBy,jdbcType=VARCHAR}
        </if>
        <if test="'valid'.toString() == column.value">
          #{item.valid,jdbcType=TINYINT}
        </if>
        <if test="'output_field'.toString() == column.value">
          #{item.outputField,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
  <insert id="upsertSelective" keyColumn="id" keyProperty="id" parameterType="com.damaohongtu.orderquery.dao.entity.Node" useGeneratedKeys="true">
    insert into node
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="nodeCode != null">
        node_code,
      </if>
      <if test="graphCode != null">
        graph_code,
      </if>
      <if test="nodeName != null">
        node_name,
      </if>
      <if test="nodeType != null">
        node_type,
      </if>
      <if test="dataSource != null">
        data_source,
      </if>
      <if test="inputField != null">
        input_field,
      </if>
      <if test="routeRule != null">
        route_rule,
      </if>
      <if test="neighborNode != null">
        neighbor_node,
      </if>
      <if test="coordinate != null">
        coordinate,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="valid != null">
        valid,
      </if>
      <if test="outputField != null">
        output_field,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="nodeCode != null">
        #{nodeCode,jdbcType=VARCHAR},
      </if>
      <if test="graphCode != null">
        #{graphCode,jdbcType=VARCHAR},
      </if>
      <if test="nodeName != null">
        #{nodeName,jdbcType=VARCHAR},
      </if>
      <if test="nodeType != null">
        #{nodeType,jdbcType=VARCHAR},
      </if>
      <if test="dataSource != null">
        #{dataSource,jdbcType=VARCHAR},
      </if>
      <if test="inputField != null">
        #{inputField,jdbcType=VARCHAR},
      </if>
      <if test="routeRule != null">
        #{routeRule,jdbcType=VARCHAR},
      </if>
      <if test="neighborNode != null">
        #{neighborNode,jdbcType=VARCHAR},
      </if>
      <if test="coordinate != null">
        #{coordinate,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="valid != null">
        #{valid,jdbcType=TINYINT},
      </if>
      <if test="outputField != null">
        #{outputField,jdbcType=LONGVARCHAR},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      <if test="nodeCode != null">
        node_code = #{nodeCode,jdbcType=VARCHAR},
      </if>
      <if test="graphCode != null">
        graph_code = #{graphCode,jdbcType=VARCHAR},
      </if>
      <if test="nodeName != null">
        node_name = #{nodeName,jdbcType=VARCHAR},
      </if>
      <if test="nodeType != null">
        node_type = #{nodeType,jdbcType=VARCHAR},
      </if>
      <if test="dataSource != null">
        data_source = #{dataSource,jdbcType=VARCHAR},
      </if>
      <if test="inputField != null">
        input_field = #{inputField,jdbcType=VARCHAR},
      </if>
      <if test="routeRule != null">
        route_rule = #{routeRule,jdbcType=VARCHAR},
      </if>
      <if test="neighborNode != null">
        neighbor_node = #{neighborNode,jdbcType=VARCHAR},
      </if>
      <if test="coordinate != null">
        coordinate = #{coordinate,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="valid != null">
        valid = #{valid,jdbcType=TINYINT},
      </if>
      <if test="outputField != null">
        output_field = #{outputField,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <insert id="upsert" keyColumn="id" keyProperty="id" parameterType="com.damaohongtu.orderquery.dao.entity.Node" useGeneratedKeys="true">
    insert into node
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      node_code,
      graph_code,
      node_name,
      node_type,
      data_source,
      input_field,
      route_rule,
      neighbor_node,
      coordinate,
      create_time,
      update_time,
      create_by,
      update_by,
      valid,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      #{nodeCode,jdbcType=VARCHAR},
      #{graphCode,jdbcType=VARCHAR},
      #{nodeName,jdbcType=VARCHAR},
      #{nodeType,jdbcType=VARCHAR},
      #{dataSource,jdbcType=VARCHAR},
      #{inputField,jdbcType=VARCHAR},
      #{routeRule,jdbcType=VARCHAR},
      #{neighborNode,jdbcType=VARCHAR},
      #{coordinate,jdbcType=VARCHAR},
      #{createTime,jdbcType=TIMESTAMP},
      #{updateTime,jdbcType=TIMESTAMP},
      #{createBy,jdbcType=VARCHAR},
      #{updateBy,jdbcType=VARCHAR},
      #{valid,jdbcType=TINYINT},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      node_code = #{nodeCode,jdbcType=VARCHAR},
      graph_code = #{graphCode,jdbcType=VARCHAR},
      node_name = #{nodeName,jdbcType=VARCHAR},
      node_type = #{nodeType,jdbcType=VARCHAR},
      data_source = #{dataSource,jdbcType=VARCHAR},
      input_field = #{inputField,jdbcType=VARCHAR},
      route_rule = #{routeRule,jdbcType=VARCHAR},
      neighbor_node = #{neighborNode,jdbcType=VARCHAR},
      coordinate = #{coordinate,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=VARCHAR},
      update_by = #{updateBy,jdbcType=VARCHAR},
      valid = #{valid,jdbcType=TINYINT},
    </trim>
  </insert>
  <insert id="upsertWithBLOBs" keyColumn="id" keyProperty="id" parameterType="com.damaohongtu.orderquery.dao.entity.Node" useGeneratedKeys="true">
    insert into node
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      node_code,
      graph_code,
      node_name,
      node_type,
      data_source,
      input_field,
      route_rule,
      neighbor_node,
      coordinate,
      create_time,
      update_time,
      create_by,
      update_by,
      valid,
      output_field,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      #{nodeCode,jdbcType=VARCHAR},
      #{graphCode,jdbcType=VARCHAR},
      #{nodeName,jdbcType=VARCHAR},
      #{nodeType,jdbcType=VARCHAR},
      #{dataSource,jdbcType=VARCHAR},
      #{inputField,jdbcType=VARCHAR},
      #{routeRule,jdbcType=VARCHAR},
      #{neighborNode,jdbcType=VARCHAR},
      #{coordinate,jdbcType=VARCHAR},
      #{createTime,jdbcType=TIMESTAMP},
      #{updateTime,jdbcType=TIMESTAMP},
      #{createBy,jdbcType=VARCHAR},
      #{updateBy,jdbcType=VARCHAR},
      #{valid,jdbcType=TINYINT},
      #{outputField,jdbcType=LONGVARCHAR},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      node_code = #{nodeCode,jdbcType=VARCHAR},
      graph_code = #{graphCode,jdbcType=VARCHAR},
      node_name = #{nodeName,jdbcType=VARCHAR},
      node_type = #{nodeType,jdbcType=VARCHAR},
      data_source = #{dataSource,jdbcType=VARCHAR},
      input_field = #{inputField,jdbcType=VARCHAR},
      route_rule = #{routeRule,jdbcType=VARCHAR},
      neighbor_node = #{neighborNode,jdbcType=VARCHAR},
      coordinate = #{coordinate,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=VARCHAR},
      update_by = #{updateBy,jdbcType=VARCHAR},
      valid = #{valid,jdbcType=TINYINT},
      output_field = #{outputField,jdbcType=LONGVARCHAR},
    </trim>
  </insert>
  <insert id="batchUpsertSelective" parameterType="map">
    insert into node (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=BIGINT}
        </if>
        <if test="'node_code'.toString() == column.value">
          #{item.nodeCode,jdbcType=VARCHAR}
        </if>
        <if test="'graph_code'.toString() == column.value">
          #{item.graphCode,jdbcType=VARCHAR}
        </if>
        <if test="'node_name'.toString() == column.value">
          #{item.nodeName,jdbcType=VARCHAR}
        </if>
        <if test="'node_type'.toString() == column.value">
          #{item.nodeType,jdbcType=VARCHAR}
        </if>
        <if test="'data_source'.toString() == column.value">
          #{item.dataSource,jdbcType=VARCHAR}
        </if>
        <if test="'input_field'.toString() == column.value">
          #{item.inputField,jdbcType=VARCHAR}
        </if>
        <if test="'route_rule'.toString() == column.value">
          #{item.routeRule,jdbcType=VARCHAR}
        </if>
        <if test="'neighbor_node'.toString() == column.value">
          #{item.neighborNode,jdbcType=VARCHAR}
        </if>
        <if test="'coordinate'.toString() == column.value">
          #{item.coordinate,jdbcType=VARCHAR}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'create_by'.toString() == column.value">
          #{item.createBy,jdbcType=VARCHAR}
        </if>
        <if test="'update_by'.toString() == column.value">
          #{item.updateBy,jdbcType=VARCHAR}
        </if>
        <if test="'valid'.toString() == column.value">
          #{item.valid,jdbcType=TINYINT}
        </if>
        <if test="'output_field'.toString() == column.value">
          #{item.outputField,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
    on duplicate key update 
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName} = values(${column.escapedColumnName})
    </foreach>
  </insert>
  <insert id="batchUpsert" parameterType="map">
    insert into node
    (id, node_code, graph_code, node_name, node_type, data_source, input_field, route_rule, 
      neighbor_node, coordinate, create_time, update_time, create_by, update_by, valid
      )
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.nodeCode,jdbcType=VARCHAR}, #{item.graphCode,jdbcType=VARCHAR}, 
        #{item.nodeName,jdbcType=VARCHAR}, #{item.nodeType,jdbcType=VARCHAR}, #{item.dataSource,jdbcType=VARCHAR}, 
        #{item.inputField,jdbcType=VARCHAR}, #{item.routeRule,jdbcType=VARCHAR}, #{item.neighborNode,jdbcType=VARCHAR}, 
        #{item.coordinate,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}, 
        #{item.createBy,jdbcType=VARCHAR}, #{item.updateBy,jdbcType=VARCHAR}, #{item.valid,jdbcType=TINYINT}
        )
    </foreach>
    on duplicate key update 
    id = values(id),
    node_code = values(node_code),
    graph_code = values(graph_code),
    node_name = values(node_name),
    node_type = values(node_type),
    data_source = values(data_source),
    input_field = values(input_field),
    route_rule = values(route_rule),
    neighbor_node = values(neighbor_node),
    coordinate = values(coordinate),
    create_time = values(create_time),
    update_time = values(update_time),
    create_by = values(create_by),
    update_by = values(update_by),
    valid = values(valid)
  </insert>
  <insert id="batchUpsertWithBLOBs" parameterType="map">
    insert into node
    (id, node_code, graph_code, node_name, node_type, data_source, input_field, route_rule, 
      neighbor_node, coordinate, create_time, update_time, create_by, update_by, valid, 
      output_field)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.nodeCode,jdbcType=VARCHAR}, #{item.graphCode,jdbcType=VARCHAR}, 
        #{item.nodeName,jdbcType=VARCHAR}, #{item.nodeType,jdbcType=VARCHAR}, #{item.dataSource,jdbcType=VARCHAR}, 
        #{item.inputField,jdbcType=VARCHAR}, #{item.routeRule,jdbcType=VARCHAR}, #{item.neighborNode,jdbcType=VARCHAR}, 
        #{item.coordinate,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}, 
        #{item.createBy,jdbcType=VARCHAR}, #{item.updateBy,jdbcType=VARCHAR}, #{item.valid,jdbcType=TINYINT}, 
        #{item.outputField,jdbcType=LONGVARCHAR})
    </foreach>
    on duplicate key update 
    id = values(id),
    node_code = values(node_code),
    graph_code = values(graph_code),
    node_name = values(node_name),
    node_type = values(node_type),
    data_source = values(data_source),
    input_field = values(input_field),
    route_rule = values(route_rule),
    neighbor_node = values(neighbor_node),
    coordinate = values(coordinate),
    create_time = values(create_time),
    update_time = values(update_time),
    create_by = values(create_by),
    update_by = values(update_by),
    valid = values(valid),
    output_field = values(output_field)
  </insert>
</mapper>